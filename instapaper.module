<?php
// $Id$
/**
 * @file instapaper.module
 * Provides connection to Instapaper service
 */

/**
 * Implementation of hook_help().
 */
function instapaper_help($path, $arg) {
  switch ($path) {
    case 'admin/help#instapaper':
      return t('Provides functionality to interface with the Instapaper web service to allow offline reading.');
    case 'admin/settings/instapaper':
      return t('Below provides the settings for interfacing with the <a href="@instapaper">Instapaper</a> web service.', array('@instapaper' => 'http://instapaper.com'));
  }
}


/**
 * Implementation of hook_menu().
 */
function instapaper_menu() { 
  // This is the minimum information you can provide for a menu item.
  $items['admin/settings/instapaper'] = array(
    'title' => t('Instapaper'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instapaper_admin_settings'),
    'access arguments' => array('administer instapaper'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'instapaper.admin.inc',
  );
  return $items;
}


/**
 * Implementation of hook_perm().
 */
function instapaper_perm() {
  return array('administer instapaper', 'use instapaper');
}

/**
 * Implementation of hook_link().
 */
function instapaper_link($type, $object, $teaser = FALSE) {
  $links = array();
  
  if ($type == 'node' && user_access('use instapaper')) {
    if (variable_get('instapaper_instapaper_this_where', 'links') == 'links') {
      if (in_array($node->type, variable_get('instapaper_instapaper_this_node_types', array()), TRUE)) {
        $links['instapaper_link'] = array(
            'title' => t('instapaper'),
            'href' => url('node/'. $node->nid, array('absolute' => TRUE)),
            'attributes' => array(
              'class' => 'instapaper-link', // This is the class that is processed.
              'title' => check_plain($node->title),
              'rel' => 'nofollow',
            ),
        );
      }
    }
  }
  
  // TODO: Perform logic to determine when link should appear
/*
  $links['instapaper_KEY1'] = array( // a regular link
    'title' => t('TODO: Fill in link title'),
    'href' => 'TODO: Fill in link path',
    'attributes' => array('title' => t('TODO: Fill in link title attribute.')),  
  );
  $links['instapaper_KEY1'] = array( // a fake link that's just text
    'title' => t('TODO: Fill in link title'),
    'attributes' => array('title' => t('TODO: Fill in link title attribute.')),  
  );
  $links['instapaper_KEY1'] = array( // a link that's we're sending as HTML
    'title' => t('TODO: Fill in link HTML'),
    'html' => TRUE,
  );
*/
  // OPTIONAL: Add additional links
  
  return $links;
}


/**
 * Implementation of hook_nodeapi().
 */
function instapaper_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'alter':
      // OPTIONAL: the $node->content array has been rendered, so the node body or
      // teaser is filtered and now contains HTML. This op should only be used when
      // text substitution, filtering, or other raw text operations are necessary.
      break;
    case 'delete':
      // OPTIONAL: The node is being deleted.
      break;
    case 'delete revision':
      // OPTIONAL: The revision of the node is deleted. You can delete data
      // associated with that revision.
      break;
    case 'insert':
      // OPTIONAL: The node is being created (inserted in the database).
      break;
    case 'load':
      // OPTIONAL: The node is about to be loaded from the database. This hook
      // can be used to load additional data at this time.
      break;
    case 'prepare':
      // OPTIONAL: The node is about to be shown on the add/edit form.
      break;
    case 'prepare translation':
      // OPTIONAL: The node is being cloned for translation. Load
      // additional data or copy values from $node->translation_source.
      break;
    case 'print':
      // OPTIONAL: Prepare a node view for printing. Used for printer-friendly
      // view in book_module
      break;
    case 'rss item':
      // OPTIONAL: An RSS feed is generated. The module can return properties
      // to be added to the RSS item generated for this node. See comment_nodeapi()
      // and upload_nodeapi() for examples. The $node passed can also be modified
      // to add or remove contents to the feed item.
      break;
    case 'search result':
      // OPTIONAL: The node is displayed as a search result. If you
      // want to display extra information with the result, return it.
      break;
    case 'presave':
      // OPTIONAL: The node passed validation and is about to be saved. Modules may
      //  use this to make changes to the node before it is saved to the database.
      break;
    case 'update':
      // OPTIONAL: The node is being updated.
      break;
    case 'update index':
      // OPTIONAL: The node is being indexed. If you want additional
      // information to be indexed which is not already visible through
      // nodeapi "view", then you should return it here.
      break;
    case 'validate':
      // OPTIONAL: The user has just finished editing the node and is
      // trying to preview or submit it. This hook can be used to check
      // the node data. Errors should be set with form_set_error().
      break;
    case 'view':
      // OPTIONAL: The node content is being assembled before rendering. The module
      // may add elements $node->content prior to rendering. This hook will be
      // called after hook_view().  The format of $node->content is the same as
      // used by Forms API.
      if (user_access('use instapaper')) {
        if (!$teaser || variable_get('instapaper_teaser', 1)) {
          if (variable_get('instapaper_instapaper_this_where', 'links') == 'nodes') {
            if (in_array($node->type, variable_get('instapaper_instapaper_this_node_types', array()), TRUE)) {
              // Create the instapaper element.
              $instapaper = theme('instapaper', $node->title, url('node/'. $node->nid, array('absolute' => TRUE)));
              $node->content['instapaper_instapaper_this'] = array(
                '#value' => $instapaper,
                '#weight' => variable_get('instapaper_instapaper_weight', 0),
              );
            }
          }
        } 
      }
      break;
  }
}


/**
 * Implementation of hook_theme().
 */
/*
function instapaper_theme($existing, $type, $theme, $path) {
  return array(
    'my_simple_theme_function' => array(
      'arguments' => array('arg1' => NULL, 'arg2' => 0, 'arg3' => FALSE),
    ),
  );
}
*/


/**
 * Themes the Instapaper options given.
 *
 * @param $title
 *   (optional) The name of the article you want to share. If not given, will
 *   use the title of the currently displayed page.
 * @param $url
 *   (optional) The URL of the article you want to share. If not given, will use
 *   the URL of the page you're currently on.
 * @return
 *   HTML for the instapaper element.
 */
function theme_instapaper($title = NULL, $url = NULL) {
  // Construct the instapaper  link using the title and the URL.
  $title = isset($title) ? $title : drupal_get_title();
  $url = isset($url) ? $url : $_GET['q'];
  return l(t('Instapaper'), $url, array(
    'absolute' => TRUE,
    'attributes' => array(
      'class' => 'instapaper-link',
      'title' => $title,
      'rel' => 'nofollow',
    ),
  ));
}

