<?php
// $Id$
/**
 * @file instapaper.module
 * Provides connection to Instapaper service
 */

/**
 * Implementation of hook_help().
 */
function instapaper_help($path, $arg) {
  switch ($path) {
    case 'admin/help#instapaper':
      return '<p>' . t('Provides functionality to interface with the Instapaper web service to allow offline reading.') . '</p>';
    case 'admin/settings/instapaper':
      return t('Below provides the settings for interfacing with the <a href="@instapaper">Instapaper</a> web service.', array('@instapaper' => 'http://instapaper.com'));
  }
}


/**
 * Implementation of hook_menu().
 */
function instapaper_menu() { 
  // This is the minimum information you can provide for a menu item.
  $items['admin/settings/instapaper'] = array(
    'title' => t('Instapaper'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('instapaper_admin_settings'),
    'access arguments' => array('administer instapaper'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'instapaper.admin.inc',
  );
  return $items;
}


/**
 * Implementation of hook_perm().
 */
function instapaper_perm() {
  return array('administer instapaper', 'use instapaper');
}


/**
 * Implementation of hook_link().
 */
function instapaper_link($type, $node = NULL, $teaser = FALSE) {
  if ($type == 'node' && user_access('use instapaper')) {
    if (variable_get('instapaper_instapaper_this_where', 'links') == 'links') {
      if (in_array($node->type, variable_get('instapaper_instapaper_this_node_types', array()), TRUE)) {
        $links['instapaper_link'] = array(
          'title' => t('instapaper'),
          'href' => url('node/'. $node->nid, array('absolute' => TRUE)),
          'attributes' => array(
            'class' => 'instapaper-link', // This is the class that is processed.
            'title' => check_plain($node->title),
            'rel' => 'nofollow',
          ),
        );
      }
    }
  }
  return $links;
}


/**
 * Implementation of hook_nodeapi().
 */
function instapaper_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
   case 'view':
    // OPTIONAL: The node content is being assembled before rendering. The module
    // may add elements $node->content prior to rendering. This hook will be
    // called after hook_view().  The format of $node->content is the same as
    // used by Forms API.
    if (user_access('use instapaper')) {
      if (!$teaser || variable_get('instapaper_teaser', 1)) {
        if (variable_get('instapaper_instapaper_this_where', 'links') == 'nodes') {
          if (in_array($node->type, variable_get('instapaper_instapaper_this_node_types', array()), TRUE)) {
            // Create the instapaper element.
            $instapaper = theme('instapaper', $node->title, url('node/'. $node->nid, array('absolute' => TRUE)));
            dpm($instapaper);
            $node->content['instapaper_instapaper_this'] = array(
              '#value' => $instapaper,
              '#weight' => variable_get('instapaper_instapaper_weight', 0),
            );
          }
        }
      } 
    }
    break;
  }
}


/**
 * Implementation of hook_theme().
 */
/*
function instapaper_theme($existing, $type, $theme, $path) {
  return array(
    'my_simple_theme_function' => array(
      'arguments' => array('arg1' => NULL, 'arg2' => 0, 'arg3' => FALSE),
    ),
  );
}
*/


/**
 * Themes the Instapaper options given.
 *
 * @param $title
 *   (optional) The name of the article you want to share. If not given, will
 *   use the title of the currently displayed page.
 * @param $url
 *   (optional) The URL of the article you want to share. If not given, will use
 *   the URL of the page you're currently on.
 * @return
 *   HTML for the instapaper element.
 */
function theme_instapaper($title = NULL, $url = NULL) {
  // Construct the instapaper  link using the title and the URL.
  $title = isset($title) ? $title : drupal_get_title();
  $url = isset($url) ? $url : $_GET['q'];
  return l(t('Instapaper'), $url, array(
    'absolute' => TRUE,
    'attributes' => array(
      'class' => 'instapaper-link',
      'title' => $title,
      'rel' => 'nofollow',
    ),
  ));
}

